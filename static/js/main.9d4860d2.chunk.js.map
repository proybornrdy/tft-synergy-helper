{"version":3,"sources":["synergy_champ.js","App.js","serviceWorker.js","index.js"],"names":["Synergy","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataLink","selectedChamp","generatedChamp","gainedSynergy","sort","champClick","bind","assertThisInitialized","buildTeam","printSynergy","sortCostClick","sortSynClick","champList","link","self","react_default","a","createElement","className","width","map","champ","id","src","onClick","data","synergies","keys","complete","partial","length","i","push","apply","comp","toUpperCase","b","syn","champCosts","champsByCost","champData","champlist","champions","champPortraits","key","classSynergies","classData","originSynergies","originData","classList","originList","findSynergyChamp","cList","align","oList","e","setState","test","includes","target","replace","splice","indexOf","costData","cost","generatedList","selectedList","validSpot","neededSynergies","getPlayerHandInfo","qualitySynergies","random","selectedSynergy","Math","floor","findSynergyNotInHand","randomChamp","quantitySynergies","synCurrStat","currSynergy","synCount","j","toLowerCase","synMap","getSynergyInfo","synResult","synergy","charAt","slice","result","champInfo","hand","index","championList","quantitySynergyProgress","1","2","3","completed","qualitySynergyProgress","4","5","synergyCount","origins","classes","originIndex","champOrigin","classIndex","champClass","synergyLevelMap","currSynergyCount","diff","maxDiff","synergyList","synergyData","bonusRankIndex","synergyLevels","span","height","printSelected","printGenerated","colSpan","champSort","React","Component","App","src_synergy_champ","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iziCA4pBeA,cAjpBX,SAAAA,EAAaC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAW,+DACXC,cAAgB,GAChBC,eAAgB,GAChBC,cAAe,GACfC,KAAK,OAETZ,EAAKa,WAAab,EAAKa,WAAWC,KAAhBb,OAAAc,EAAA,EAAAd,CAAAD,IAClBA,EAAKgB,UAAWhB,EAAKgB,UAAUF,KAAfb,OAAAc,EAAA,EAAAd,CAAAD,IAChBA,EAAKiB,aAAejB,EAAKiB,aAAaH,KAAlBb,OAAAc,EAAA,EAAAd,CAAAD,IACpBA,EAAKkB,cAAgBlB,EAAKkB,cAAcJ,KAAnBb,OAAAc,EAAA,EAAAd,CAAAD,IACrBA,EAAKmB,aAAenB,EAAKmB,aAAaL,KAAlBb,OAAAc,EAAA,EAAAd,CAAAD,IAbLA,gFAiBf,IAAIoB,EAAYjB,KAAKI,MAAMG,eACvBW,EAAOlB,KAAKI,MAAMC,SAChBc,EAAOnB,KACb,OAAKiB,EAAU,EACHG,EAAAC,EAAAC,cAAA,MAAIC,UAAY,mBAAmBC,MAAM,OAGtCP,EAAUQ,IAAI,SAASC,GAC9B,OACQN,EAAAC,EAAAC,cAAA,MAAIC,UAAY,oBAChBH,EAAAC,EAAAC,cAAA,OACAK,GAAID,EACJH,UAAW,eACXK,IAAOV,EAAOQ,EAAO,OACrBG,QAASV,EAAKT,wDAU9B,IAAIO,EAAYjB,KAAKI,MAAME,cACvBY,EAAOlB,KAAKI,MAAMC,SAChBc,EAAOnB,KACb,OAAKiB,EAAU,EACHG,EAAAC,EAAAC,cAAA,MAAIC,UAAY,mBAAmBC,MAAM,OAGtCP,EAAUQ,IAAI,SAASC,GAC9B,OACQN,EAAAC,EAAAC,cAAA,MAAIC,UAAY,oBAChBH,EAAAC,EAAAC,cAAA,OACAK,GAAID,EACJH,UAAW,eACXK,IAAOV,EAAOQ,EAAO,OACrBG,QAASV,EAAKT,uDAW9B,IAAIoB,EAAO9B,KAAKI,MAAMI,cAClBuB,EAAYjC,OAAOkC,KAAKF,GACxBG,EAAW,GACXC,EAAU,GACd,GAAGH,EAAUI,OAAO,EAAE,CAClB,IAAK,IAAIC,KAAKL,EACNA,EAAUK,GAAG,IAAM,YACnBH,EAASI,KAAKC,MAAML,EAASH,EAAI,WAGjCI,EAAQG,KAAKN,EAAUK,GAAG,KAAKN,EAAKC,EAAUK,IAAI,KAI1D,IAAIf,EAAIY,EAASR,IAAI,SAASc,GAC1B,OAAOnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBgB,EAAKC,iBAE7CC,EAAIP,EAAQT,IAAI,SAASiB,GACzB,OAAOtB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAA4BmB,EAAIF,iBAExD,OACIpB,EAAAC,EAAAC,cAAA,YAAOD,EAAGoB,wCAQlB,IAAIE,EAAa3C,KAAK4C,aAAa9C,OAAOkC,KAAKa,IAC3C3B,EAAMlB,KAAKI,MAAMC,SACfc,EAAOnB,KAEb,GAAuB,SAApBA,KAAKI,MAAMK,KAAgB,CAC1B,IAAIqC,EAAY,GAChB,IAAK,IAAIV,KAAKO,EAAW,CACrB,IAAII,EAAYJ,EAAWP,GACvBY,EAAiBD,EAAUtB,IAAI,SAASC,GAExC,OACIN,EAAAC,EAAAC,cAAA,MAAI2B,IAAKvB,GACLN,EAAAC,EAAAC,cAAA,OACAK,GAAID,EACJH,UAAW,mBAAuBa,EAClCR,IAAOV,EAAOQ,EAAO,OACrBG,QAASV,EAAKT,gBAI1BoC,EAAUT,KAAKjB,EAAAC,EAAAC,cAAA,MAAI2B,IAAKb,GAAIY,IAEhC,OAAO5B,EAAAC,EAAAC,cAAA,SAAOC,UAAY,iBAAgBH,EAAAC,EAAAC,cAAA,aAAQwB,IAGlD,IAAII,EAAiBpD,OAAOkC,KAAMmB,GAC9BC,EAAkBtD,OAAOkC,KAAKqB,GAE9BC,EAAY,GACZC,EAAY,GAEhB,IAAKnB,KAAKc,EACNI,EAAWJ,EAAed,IAAMpC,KAAKwD,iBAAiBN,EAAed,IAEzE,IAAKA,KAAKgB,EACNG,EAAYH,EAAgBhB,IAAMpC,KAAKwD,iBAAiBJ,EAAgBhB,IAG5E,IAAIqB,EAAO,GACX,IAAIrB,KAAKkB,EAELN,GADAD,EAAWO,EAAUlB,IACMX,IAAI,SAASC,GACpC,OACIN,EAAAC,EAAAC,cAAA,MAAI2B,IAAKvB,GACLN,EAAAC,EAAAC,cAAA,OACAK,GAAID,EACJH,UAAW,eACXK,IAAOV,EAAOQ,EAAO,OACrBG,QAASV,EAAKT,gBAM1B+C,EAAMpB,KACFjB,EAAAC,EAAAC,cAAA,SAAO2B,IAAOb,EAAE,UAAUhB,EAAAC,EAAAC,cAAA,WAASC,UAAY,QAAQmC,MAAM,OAAOtB,EAAEI,eACtEpB,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,MAAI2B,IAAKb,GAAIY,MAMrB,IAAIW,EAAO,GACX,IAAIvB,KAAKmB,EAGLP,GADAD,EAAWQ,EAAWnB,IACKX,IAAI,SAASC,GACpC,OACIN,EAAAC,EAAAC,cAAA,MAAI2B,IAAKvB,GACLN,EAAAC,EAAAC,cAAA,OACAK,GAAID,EACJH,UAAW,eACXK,IAAOV,EAAOQ,EAAO,OACrBG,QAASV,EAAKT,gBAK1BiD,EAAMtB,KACFjB,EAAAC,EAAAC,cAAA,SAAO2B,IAAOb,EAAE,WAAYhB,EAAAC,EAAAC,cAAA,WAASC,UAAY,QAAQmC,MAAM,OAAOtB,EAAEI,eACxEpB,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,MAAI2B,IAAKb,GAAIY,MAOrB,OACI5B,EAAAC,EAAAC,cAAA,SAAOC,UAAY,iBAAiBH,EAAAC,EAAAC,cAAA,aAChCF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,WAASoC,MAAM,OAAf,WACAtC,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAKmC,OAEpBrC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,WAASoC,MAAM,OAAf,WACAtC,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAKqC,gDAO1BC,GAEO,SADH5D,KAAKI,MAAMK,MAErBT,KAAK6D,SAAS,CACVpD,KAAK,8CAIJmD,GAEM,SADD5D,KAAKI,MAAMK,MAErBT,KAAK6D,SAAS,CACVpD,KAAK,2CAKNmD,GACP,IAAIE,EAAO9D,KAAKI,MAAME,cACZN,KAAKI,MAAMG,eAElBuD,EAAK3B,OAAO,KACN2B,EAAKC,SAASH,EAAEI,OAAOrC,KAOxBiC,EAAEI,OAAOzC,UAAYqC,EAAEI,OAAOzC,UAAU0C,QAAQ,WAAY,IAC5DH,EAAKI,OAAOJ,EAAKK,QAAQP,EAAEI,OAAOrC,IAAI,GACtC3B,KAAK6D,SAAS,SAAAzD,GAAK,MAAK,CACpBE,cAAewD,OATnBF,EAAEI,OAAOzC,WAAa,WACtBuC,EAAKzB,KAAKuB,EAAEI,OAAOrC,IACnB3B,KAAK6D,SAAS,SAAAzD,GAAK,MAAK,CACpBE,cAAewD,4CAuBlB7C,GAGT,IAAImD,EAAW,GAEf,IAAK,IAAIhC,KAAMnB,EAAU,CACrB,IAAIoD,EAAOxB,EAAU5B,EAAUmB,IAApB,KACXgC,EAASC,GAASD,EAASC,IAAO,GAClCD,EAASC,GAAMhC,KAAKpB,EAAUmB,IAGlC,OAAOgC,sCAKP,IAAIE,EAAgB,GAChBC,EAAevE,KAAKI,MAAME,cAC1BW,EAAW,GAGf,GAAGnB,OAAOkC,KAAKuC,GAAcpC,OAAO,EAAE,CAClC,IAAIqC,EAHY,EAGgBD,EAAapC,OAI7C,IAHAlB,EAAUoB,KAAKC,MAAMrB,EAAWsD,GAChCtD,EAAUoB,KAAKC,MAAMrB,EAAWqD,GAE1BE,EAAY,GAAE,CAQhB,IANA,IAAIC,EAAkBzE,KAAK0E,kBAAkBzD,GAKzC0D,EAAkB,GACbvC,EAAI,EAAGA,GAAIoC,EAAYpC,IACU,qBAA1BqC,EAAgB,GAAGrC,IAAuBqC,EAAgB,GAAGrC,GAAGD,OAAS,IACjFwC,EAAiBvC,GAAKqC,EAAgB,GAAGrC,IAIjD,IAAIwC,EAAS9E,OAAOkC,KAAK2C,GAEzB,GAAGC,EAAOzC,OAAS,EAAE,CAEjB,IAAI0C,EAAkBF,EADtBC,EAASA,EAAOE,KAAKC,MAAMD,KAAKF,SAASA,EAAOzC,UAEhD0C,EAAkBA,EAAgBC,KAAKC,MAAMD,KAAKF,SAASC,EAAgB1C,SAE3E,IAAI7B,EAAgBN,KAAKwD,iBAAiBqB,GAE1C,IADAvE,EAAgBN,KAAKgF,qBAAqB/D,EAAWX,GACjD8B,EAAI,EAAGA,GAAGwC,EAAO,EAAGxC,IAAI,CACxB,IAAI6C,EAAc3E,EAAcwE,KAAKC,MAAMD,KAAKF,SAAStE,EAAc6B,SACvE7B,EAAc4D,OAAQ5D,EAAc6D,QAAQc,GAAc,GAC1DhE,EAAUoB,KAAK4C,GAGnBT,GAAaI,MACZ,CAED,IAAIM,EAAoB,GACxB,IAAI9C,EAAI,EAAGA,GAAGoC,EAAUpC,IACiB,qBAA1BqC,EAAgB,GAAGrC,IAAuBqC,EAAgB,GAAGrC,GAAGD,OAAS,IAChF+C,EAAkB9C,GAAKqC,EAAgB,GAAGrC,IAqBlD,KAjBAwC,EAAS9E,OAAOkC,KAAKkD,IAEX/C,OAAS,GAEf0C,EAAkBK,EADlBN,EAASA,EAAOE,KAAKC,MAAMD,KAAKF,SAASA,EAAOzC,UAE3B,IAAlByC,EAAOzC,QACF0C,EAAgBxC,KAAKC,MAAMuC,EAAgB,CAAC,WAAW,aAG/DD,EAAS,EACTC,EAAkB,CAAC,QAAS,UAEhCA,EAAkBA,EAAgBC,KAAKC,MAAMD,KAAKF,SAASC,EAAgB1C,SAE3E7B,EAAgBN,KAAKwD,iBAAiBqB,GACtCvE,EAAgBN,KAAKgF,qBAAqB/D,EAAWX,GAEjD8B,EAAI,EAAGA,GAAGwC,EAAO,EAAGxC,IAAI,CACpB6C,EAAc3E,EAAcwE,KAAKC,MAAMD,KAAKF,SAAStE,EAAc6B,SACvE7B,EAAc4D,OAAQ5D,EAAc6D,QAAQc,GAAc,GAC1DhE,EAAUoB,KAAK4C,GAEnBT,GAAaI,GAIrB,IAAKxC,KAAKnB,EAEDsD,EAAaR,SAAS9C,EAAUmB,KACjCkC,EAAcjC,KAAKpB,EAAUmB,IAKrC,IAAI+C,EAAcnF,KAAK0E,kBAAkBzD,GAAW,GAChDmE,EAAc,GAElB,IAAKhD,EAAE,EAAGA,GAAG,EAAEA,IACR+C,EAAY/C,GAAGD,OAAO,GACrBiD,EAAY/C,KAAKC,MAAM8C,EAAYD,EAAY/C,IAIvD,IAAIiD,EAAW,GACf,IAAKjD,KAAKgD,EACNC,EAASD,EAAYhD,IAAM,EAG/B,IAAKA,KAAKnB,EAAU,CAChB,IAAI,IAAIqE,KAAKzC,EAAU5B,EAAUmB,IAApB,OACTiD,EAASxC,EAAU5B,EAAUmB,IAApB,OAAkCkD,GAAGC,gBAAiB,EAEnE,IAAID,KAAKzC,EAAU5B,EAAUmB,IAApB,MACLiD,EAASxC,EAAU5B,EAAUmB,IAApB,MAAiCkD,GAAGC,gBAAiB,EAMtE,IAAIC,EAASxF,KAAKyF,eAAeL,GAE7BM,EAAY,GAChB,IAAKtD,KAAKgD,EACN,IAAK,IAAIE,KAAKE,EAAOJ,EAAYhD,IACzBiD,EAASD,EAAYhD,KAAKoD,EAAOJ,EAAYhD,IAAIkD,KACjDI,EAAUN,EAAYhD,IAAMoD,EAAOJ,EAAYhD,IAAIkD,IAK/DI,EAAS,UAAgBP,EAAW,UAGpCnF,KAAK6D,SAAS,SAACzD,GACX,MAAM,CACFG,eAAe+D,EACf9D,cAAekF,UAIvB1F,KAAK6D,SAAS,SAACzD,GACX,MAAM,CACFE,cAAgB,GAChBC,eAAgB,GAChBC,cAAe,+CAQdmF,GAGbA,EAAUA,EAAQC,OAAO,GAAGpD,cAAgBmD,EAAQE,MAAM,GAC1D,IAAIC,EAAS,GACT7E,EAAYnB,OAAOkC,KAAKa,GAE5B,IAAI,IAAInB,KAAST,EAAU,CACvB,IAAI8E,EAAYlD,EAAU5B,EAAUS,IACjCqE,EAAS,MAAUhC,SAAS4B,GAC3BG,EAAOzD,KAAK0D,EAAS,KAChBA,EAAS,OAAWhC,SAAS4B,IAClCG,EAAOzD,KAAK0D,EAAS,KAG7B,OAAOD,+CAGUE,EAAM/E,GAGvB,IAAI6E,EAAS,GACb,IAAK,IAAIG,KAAShF,EAEV+E,EAAKjC,SAAS9C,EAAUgF,KACxBH,EAAOzD,KAAKpB,EAAUgF,IAG9B,OAAOH,4CAGOI,GAId,IAAIC,EAA0B,CAC1BC,EAAE,GACFC,EAAE,GACFC,EAAE,GACFC,UAAY,IAEZC,EAAyB,CACzBJ,EAAE,GACFC,EAAE,GACFC,EAAE,GACFG,EAAE,GACFC,EAAE,GACFH,UAAY,IAGZI,EAAe,GACnB,IAAK,IAAIV,KAASC,EAAa,CAC3B,IAAIH,EAAYlD,EAAUqD,EAAaD,IACnCW,EAAUb,EAAS,OACnBc,EAAUd,EAAS,MACvB,IAAI,IAAIe,KAAeF,EAAQ,CAC3B,IAAIG,EAAcH,EAAQE,GAAavB,cACvCoB,EAAaI,IAAgBJ,EAAaI,IAAc,GAAG,EAE/D,IAAI,IAAIC,KAAcH,EAAQ,CAC1B,IAAII,EAAaJ,EAAQG,GAAYzB,cACrCoB,EAAaM,IAAeN,EAAaM,IAAa,GAAG,GAIjE,IAAIC,EAAkBlH,KAAKyF,eAAe3F,OAAOkC,KAAK2E,IACtD,IAAK,IAAIhB,KAAWuB,EAEhB,IADA,IAAIC,EAAmBR,EAAahB,GAC5BvD,EAAI,EAAGA,GAAI8E,EAAgBvB,GAASxD,OAAO,EAAEC,IACjD,GAAG+E,GAAoBD,EAAgBvB,GAASvD,GAAG,CAC/C,IAAIgF,EAAOF,EAAgBvB,GAASvD,GAAI+E,EACpCE,EACAH,EAAgBvB,GAASuB,EAAgBvB,GAASxD,OAAO,GACvDgF,EAEM,IAATC,EACCjB,EAAwB,GAAG9D,KAAKsD,GACjB,IAATyB,EACNjB,EAAwB,GAAG9D,KAAKsD,GACjB,IAATyB,EACNjB,EAAwB,GAAG9D,KAAKsD,GACjB,IAATyB,GACNjB,EAAuB,UAAc9D,KAAKsD,GAG/B,IAAZ0B,EACCb,EAAuB,GAAGnE,KAAKsD,GACb,IAAZ0B,EACNb,EAAuB,GAAGnE,KAAKsD,GACb,IAAZ0B,EACNb,EAAuB,GAAGnE,KAAKsD,GACb,IAAZ0B,EACNb,EAAuB,GAAGnE,KAAKsD,GACb,IAAZ0B,EACNb,EAAuB,GAAGnE,KAAKsD,GACb,IAAZ0B,GACNb,EAAsB,UAAcnE,KAAKsD,GAG7C,MAQZ,MAAO,CAACa,EAAwBL,0CAIrBmB,GAEX,IAAIC,EAAc,GAClB,IAAK,IAAItB,KAASqB,EAAY,CAC1B,IAAI3B,EAAU2B,EAAYrB,GAC1B,GAAI9C,EAAUwC,GAOT,CAGD,IAAK6B,KADLC,EAAgB,GACOtE,EAAUwC,GAAV,QACnB8B,EAAcpF,KAAKc,EAAUwC,GAAV,QAA8B6B,GAA9B,QAEvBD,EAAY5B,GAAW8B,MAbJ,CAEnB,IAAIA,EAAgB,GACpB,IAAK,IAAID,KAAkBnE,EAAWsC,GAAX,QACvB8B,EAAcpF,KAAKgB,EAAWsC,GAAX,QAA+B6B,GAA/B,QAEvBD,EAAY5B,GAAW8B,GAU/B,OAAOF,mCAOUvH,KAAKI,MAAME,cAC5B,OACIc,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,gBACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,yBACJF,EAAAC,EAAAC,cAAA,uBAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACbH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,4BAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,gBACbH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,6BAMxBF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UAMbH,EAAAC,EAAAC,cAAA,SAAOC,UAAY,gCACfH,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,OAAKoG,KAAK,IAAIlG,MAAM,QACpBJ,EAAAC,EAAAC,cAAA,OAAKoG,KAAK,OAEdtG,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACVH,EAAAC,EAAAC,cAAA,yBAEJF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAgBH,EAAAC,EAAAC,cAAA,UAAQO,QAAS7B,KAAKa,WAAtB,cAGlCO,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,MAAIqG,OAAS,OACTvG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACVH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,WAASoC,MAAM,OAAf,YACAtC,EAAAC,EAAAC,cAAA,SAAOqG,OAAO,MACVvG,EAAAC,EAAAC,cAAA,MAAIC,UAAY,SAASoG,OAAO,MAG5BvG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,UACbtB,KAAK4H,wBAQ1BxG,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,WAASoC,MAAM,OAAf,aACAtC,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,MAAIqG,OAAO,MAEN3H,KAAK6H,sBAM1BzG,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIwG,QAAQ,KACP9H,KAAKc,qBASlCM,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQO,QAAS7B,KAAKgB,cAAtB,oBACAI,EAAAC,EAAAC,cAAA,UAAQO,QAAS7B,KAAKe,eAAtB,oBAKhBK,EAAAC,EAAAC,cAAA,OAAKC,UAAY,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACXvB,KAAK+H,uBAzoBZC,IAAMC,WCObC,MAXf,WACE,OAEE9G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6G,EAAD,SCEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtH,EAAAC,EAAAC,cAACqH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d4860d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './synergy_champ.css';\r\n\r\nimport champData from './jsonData/champions.json';\r\nimport classData from './jsonData/classes.json';\r\nimport originData from './jsonData/origins.json';\r\n\r\n\r\n\r\nclass Synergy extends React.Component {\r\n\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            dataLink : 'https://ddragon.leagueoflegends.com/cdn/9.12.1/img/champion/',\r\n            selectedChamp : [],\r\n            generatedChamp: [],\r\n            gainedSynergy: {},\r\n            sort:\"syn\"\r\n        }\r\n        this.champClick = this.champClick.bind(this);\r\n        this.buildTeam =this.buildTeam.bind(this);\r\n        this.printSynergy = this.printSynergy.bind(this);\r\n        this.sortCostClick = this.sortCostClick.bind(this);\r\n        this.sortSynClick = this.sortSynClick.bind(this);\r\n    }\r\n\r\n    printGenerated(){\r\n        var champList = this.state.generatedChamp;\r\n        var link = this.state.dataLink;\r\n        const self = this;\r\n        if (!champList>0){\r\n            return (<td className = \"select-container\" width=\"50\"></td>)\r\n        }\r\n        else{\r\n            var list = champList.map(function(champ){\r\n                return  (\r\n                        <td className = \"select-container\" >\r\n                        <img\r\n                        id={champ}\r\n                        className={'champ-Frame '}\r\n                        src = {link + champ+ '.png'}\r\n                        onClick={self.champClick}/>\r\n                        </td>\r\n                )\r\n            })\r\n        }\r\n\r\n        return (list)\r\n    }\r\n\r\n    printSelected(){\r\n        var champList = this.state.selectedChamp;\r\n        var link = this.state.dataLink;\r\n        const self = this;\r\n        if (!champList>0){\r\n            return (<td className = \"select-container\" width=\"50\"></td>)\r\n        }\r\n        else{\r\n            var list = champList.map(function(champ){\r\n                return  (\r\n                        <td className = \"select-container\" >\r\n                        <img\r\n                        id={champ}\r\n                        className={'champ-Frame '}\r\n                        src = {link + champ+ '.png'}\r\n                        onClick={self.champClick}/>\r\n                        </td>\r\n                )\r\n            })\r\n        }\r\n\r\n        return (list\r\n        )\r\n    }\r\n\r\n    printSynergy(){\r\n        var data = this.state.gainedSynergy;\r\n        var synergies = Object.keys(data);\r\n        var complete = [];\r\n        var partial = [];\r\n        if(synergies.length>0){\r\n            for (var i in synergies){\r\n                if (synergies[i]+'' == \"completed\"){\r\n                    complete.push.apply(complete,data[\"completed\"]);\r\n                }\r\n                else{\r\n                    partial.push(synergies[i]+\" (\"+data[synergies[i]]+\")\");\r\n                }\r\n            }\r\n\r\n            var a = complete.map(function(comp){\r\n                return <p className=\"synergyContainer\">{comp.toUpperCase()}</p>\r\n            });\r\n            var b = partial.map(function(syn){\r\n                return <p className=\"synergyContainer partial\">{syn.toUpperCase()}</p>\r\n            });\r\n            return(\r\n                <span>{a}{b}</span>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    champSort(){\r\n\r\n        var champCosts = this.champsByCost(Object.keys(champData));\r\n        var link =this.state.dataLink;\r\n        const self = this;\r\n\r\n        if(this.state.sort === \"cost\"){\r\n            var champlist = [];\r\n            for (var i in champCosts){\r\n                var champions = champCosts[i];\r\n                var champPortraits = champions.map(function(champ){\r\n\r\n                    return (\r\n                        <td key={champ}>\r\n                            <img\r\n                            id={champ}\r\n                            className={'champ-Frame ' +'cost'+i }\r\n                            src = {link + champ+ '.png'}\r\n                            onClick={self.champClick}/>\r\n                        </td>\r\n                    )\r\n                })\r\n                champlist.push(<tr key={i}>{champPortraits}</tr>)\r\n            }\r\n            return(<table className = \"champion-list\"><tbody>{champlist}</tbody></table>)\r\n        }\r\n        else{\r\n            var classSynergies = Object.keys (classData);\r\n            var originSynergies = Object.keys(originData);\r\n\r\n            var classList = {};\r\n            var originList ={};\r\n\r\n            for (i in classSynergies){\r\n                classList [classSynergies[i]] = this.findSynergyChamp(classSynergies[i]);\r\n            }\r\n            for (i in originSynergies){\r\n                originList [originSynergies[i]] = this.findSynergyChamp(originSynergies[i]);\r\n            }\r\n\r\n            var cList =[];\r\n            for(i in classList){\r\n                champions= classList[i];\r\n                champPortraits = champions.map(function(champ){\r\n                    return (\r\n                        <td key={champ}>\r\n                            <img\r\n                            id={champ}\r\n                            className={'champ-Frame '}\r\n                            src = {link + champ+ '.png'}\r\n                            onClick={self.champClick}\r\n                            />\r\n                        </td>\r\n                    )\r\n\r\n                })\r\n                cList.push(\r\n                    <table key = {i+\" class\"}><caption className = \"group\" align=\"top\">{i.toUpperCase()}</caption>\r\n                    <tbody>\r\n                    <tr key={i}>{champPortraits}</tr>\r\n                    </tbody>\r\n                    </table>\r\n                )\r\n            }\r\n\r\n            var oList =[];\r\n            for(i in originList){\r\n\r\n                champions= originList[i];\r\n                champPortraits = champions.map(function(champ){\r\n                    return (\r\n                        <td key={champ}>\r\n                            <img\r\n                            id={champ}\r\n                            className={'champ-Frame '}\r\n                            src = {link + champ+ '.png'}\r\n                            onClick={self.champClick}\r\n                            />\r\n                        </td>\r\n                    )\r\n                })\r\n                oList.push(\r\n                    <table key = {i+\" origin\"} ><caption className = \"group\" align=\"top\">{i.toUpperCase()}</caption>\r\n                    <tbody>\r\n                    <tr key={i}>{champPortraits}</tr>\r\n                    </tbody>\r\n                    </table>\r\n                )\r\n            }\r\n\r\n\r\n            return(\r\n                <table className = \"champion-list\" ><tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <table>\r\n                            <caption align=\"top\">Classes</caption>\r\n                            <tbody><tr><td>{cList}</td></tr></tbody></table>\r\n                        </td>\r\n                        <td>\r\n                            <table>\r\n                            <caption align=\"top\">Origins</caption>\r\n                            <tbody><tr><td>{oList}</td></tr></tbody></table>\r\n                        </td>\r\n                    </tr>\r\n                </tbody></table>\r\n            )\r\n        }\r\n    }\r\n    sortCostClick(e){\r\n        var cursort = this.state.sort;\r\n        if(!(cursort === \"cost\")){\r\n            this.setState({\r\n                sort:\"cost\"\r\n            })\r\n        }\r\n    }\r\n    sortSynClick(e){\r\n        var cursort = this.state.sort;\r\n        if(cursort === \"cost\"){\r\n            this.setState({\r\n                sort:\"syn\"\r\n            })\r\n        }\r\n    }\r\n\r\n    champClick(e){\r\n        var test = this.state.selectedChamp;\r\n        var gen = this.state.generatedChamp;\r\n\r\n        if(test.length<10){\r\n            if (!test.includes(e.target.id)){\r\n                e.target.className += \" clicked\"\r\n                test.push(e.target.id)\r\n                this.setState(state => ({\r\n                    selectedChamp: test\r\n                }));\r\n            }else{\r\n                e.target.className = e.target.className.replace(' clicked', '');\r\n                test.splice(test.indexOf(e.target.id),1);\r\n                this.setState(state => ({\r\n                    selectedChamp: test\r\n                }));\r\n            }\r\n            // if(gen.includes(e.target.id)){\r\n            //     var temp = [gen]\r\n            //     temp.splice(temp.indexOf(e.target.id))\r\n            //     e.target.className += \" clicked\"\r\n            //     test.push(e.target.id)\r\n            //     this.setState(state => ({\r\n            //         generatedChamp: temp\r\n            //     }));\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    champsByCost(champList){\r\n        //give champion colored frame based on their cost\r\n\r\n        var costData = {};\r\n\r\n        for (var i  in champList){\r\n            var cost = champData[champList[i]][\"cost\"];\r\n            costData[cost] = (costData[cost]||[]);\r\n            costData[cost].push(champList[i])\r\n\r\n        }\r\n        return costData;\r\n    }\r\n\r\n    buildTeam(){\r\n\r\n        var generatedList = [];\r\n        var selectedList = this.state.selectedChamp;\r\n        var champList =[];\r\n        var maxChampCount = 9;\r\n\r\n        if(Object.keys(selectedList).length>0){\r\n            var validSpot = maxChampCount - selectedList.length;\r\n            champList.push.apply(champList, selectedList);\r\n            champList.push.apply(champList, generatedList);\r\n\r\n            while(validSpot > 0){ //change to while(validSpot > 0)\r\n\r\n                var neededSynergies = this.getPlayerHandInfo(champList);\r\n                //neededSynergies = [quality, quantity]\r\n                //quality mainly focuses on reaching max bonuses on required synergy\r\n                //quantity focuses on reaching many partial bonuses\r\n\r\n                var qualitySynergies ={};\r\n                for (var i = 1; i <=validSpot ; i++){\r\n                    if( (typeof neededSynergies[0][i] !== 'undefined') && neededSynergies[0][i].length > 0 ){\r\n                        qualitySynergies[i] = neededSynergies[0][i];\r\n                    }\r\n                }\r\n\r\n                var random = Object.keys(qualitySynergies);\r\n                //console.log(qualitySynergies , validSpot)\r\n                if(random.length > 0){\r\n                    random = random[Math.floor(Math.random()*random.length)]; //random == needed champ to reach max bonus\r\n                    var selectedSynergy = qualitySynergies[random];\r\n                    selectedSynergy = selectedSynergy[Math.floor(Math.random()*selectedSynergy.length)];\r\n\r\n                    var selectedChamp = this.findSynergyChamp(selectedSynergy);\r\n                    selectedChamp = this.findSynergyNotInHand(champList, selectedChamp);\r\n                    for(i = 0; i<=random-1; i++){\r\n                        var randomChamp = selectedChamp[Math.floor(Math.random()*selectedChamp.length)];\r\n                        selectedChamp.splice( selectedChamp.indexOf(randomChamp), 1 );\r\n                        champList.push(randomChamp)\r\n\r\n                    }\r\n                    validSpot -= random;\r\n                }else{\r\n\r\n                    var quantitySynergies = {};\r\n                    for(i = 1; i<=validSpot;i++){\r\n                        if((typeof neededSynergies[1][i] !== 'undefined') && neededSynergies[1][i].length > 0){\r\n                            quantitySynergies[i] = neededSynergies[1][i];\r\n                        }\r\n                    }\r\n\r\n                    random = Object.keys(quantitySynergies);\r\n\r\n                    if(random.length > 0){\r\n                        random = random[Math.floor(Math.random()*random.length)];\r\n                        selectedSynergy = quantitySynergies[random];\r\n                        if(random.length === 2){\r\n                                selectedSynergy.push.apply(selectedSynergy,[\"guardian\",\"dragon\"])\r\n                        }\r\n                    }else{\r\n                        random = 1;\r\n                        selectedSynergy = [\"exile\", \"robot\"]\r\n                    }\r\n                    selectedSynergy = selectedSynergy[Math.floor(Math.random()*selectedSynergy.length)];\r\n\r\n                    selectedChamp = this.findSynergyChamp(selectedSynergy);\r\n                    selectedChamp = this.findSynergyNotInHand(champList, selectedChamp);\r\n\r\n                    for(i = 0; i<=random-1; i++){\r\n                        var randomChamp = selectedChamp[Math.floor(Math.random()*selectedChamp.length)];\r\n                        selectedChamp.splice( selectedChamp.indexOf(randomChamp), 1 );\r\n                        champList.push(randomChamp)\r\n                    }\r\n                    validSpot -= random;\r\n                }\r\n            }\r\n\r\n            for (i in champList){\r\n                //console.log(champList[i],originList)\r\n                if (!selectedList.includes(champList[i])){\r\n                    generatedList.push(champList[i]);\r\n                }\r\n            }\r\n\r\n\r\n            var synCurrStat = this.getPlayerHandInfo(champList)[0];\r\n            var currSynergy = [];\r\n\r\n            for (i=1; i<=5;i++){\r\n                if(synCurrStat[i].length>0){\r\n                    currSynergy.push.apply(currSynergy,synCurrStat[i]);\r\n                }\r\n            }\r\n\r\n            var synCount = {}\r\n            for (i in currSynergy){\r\n                synCount[currSynergy[i]] = 0;\r\n            }\r\n\r\n            for (i in champList){\r\n                for(var j in champData[champList[i]][\"origin\"]){\r\n                    synCount[champData[champList[i]][\"origin\"][j].toLowerCase()] +=1;\r\n                }\r\n                for(j in champData[champList[i]][\"class\"]){\r\n                    synCount[champData[champList[i]][\"class\"][j].toLowerCase()] +=1;\r\n                }\r\n            }\r\n\r\n\r\n\r\n            var synMap = this.getSynergyInfo(currSynergy);\r\n\r\n            var synResult = {};\r\n            for (i in currSynergy){\r\n                for (var j in synMap[currSynergy[i]]){\r\n                    if (synCount[currSynergy[i]]>=synMap[currSynergy[i]][j]){\r\n                        synResult[currSynergy[i]] = synMap[currSynergy[i]][j]\r\n                    }\r\n                }\r\n            }\r\n\r\n            synResult[\"completed\"] = synCurrStat[\"completed\"]\r\n\r\n\r\n            this.setState((state) =>{\r\n                return{\r\n                    generatedChamp:generatedList,\r\n                    gainedSynergy: synResult\r\n                };\r\n            });\r\n        }else{\r\n            this.setState((state) =>{\r\n                return{\r\n                    selectedChamp : [],\r\n                    generatedChamp: [],\r\n                    gainedSynergy: {}\r\n                };\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    findSynergyChamp(synergy){\r\n        //find all champions with given synergy\r\n\r\n        synergy = synergy.charAt(0).toUpperCase() + synergy.slice(1)\r\n        var result = [];\r\n        var champList = Object.keys(champData);\r\n\r\n        for(var champ in champList){\r\n            var champInfo = champData[champList[champ]];\r\n            if(champInfo['class'].includes(synergy)){\r\n                result.push(champInfo['key']);\r\n            }else if(champInfo['origin'].includes(synergy)){\r\n                result.push(champInfo['key']);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    findSynergyNotInHand(hand, champList){\r\n        // from given champ list return champions thats not in player's hand\r\n\r\n        var result = [];\r\n        for (var index in champList){\r\n\r\n            if(!hand.includes(champList[index])){\r\n                result.push(champList[index])\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getPlayerHandInfo(championList){\r\n        //get details on champions player has\r\n\r\n\r\n        var quantitySynergyProgress = {\r\n            1:[],\r\n            2:[],\r\n            3:[],\r\n            \"completed\":[]\r\n        }\r\n        var qualitySynergyProgress = {\r\n            1:[],\r\n            2:[],\r\n            3:[],\r\n            4:[],\r\n            5:[],\r\n            \"completed\":[]\r\n        }\r\n\r\n        var synergyCount = {}\r\n        for (var index in championList){\r\n            var champInfo = champData[championList[index]];\r\n            var origins = champInfo[\"origin\"];\r\n            var classes = champInfo[\"class\"];\r\n            for(var originIndex in origins){\r\n                var champOrigin = origins[originIndex].toLowerCase();\r\n                synergyCount[champOrigin] = (synergyCount[champOrigin]||0)+1;\r\n            }\r\n            for(var classIndex in classes){\r\n                var champClass = classes[classIndex].toLowerCase();\r\n                synergyCount[champClass] = (synergyCount[champClass]||0)+1;\r\n            }\r\n        }\r\n\r\n        var synergyLevelMap = this.getSynergyInfo(Object.keys(synergyCount));\r\n        for( var synergy in synergyLevelMap){\r\n            var currSynergyCount = synergyCount[synergy]\r\n            for(var i = 0; i<= synergyLevelMap[synergy].length-1;i++){\r\n                if(currSynergyCount <= synergyLevelMap[synergy][i]){\r\n                    var diff = synergyLevelMap[synergy][i] -currSynergyCount;\r\n                    var maxDiff =\r\n                        synergyLevelMap[synergy][synergyLevelMap[synergy].length-1]\r\n                        - currSynergyCount;\r\n\r\n                    if(diff === 1){\r\n                        quantitySynergyProgress[1].push(synergy)\r\n                    }else if (diff === 2) {\r\n                        quantitySynergyProgress[2].push(synergy)\r\n                    }else if (diff === 3) {\r\n                        quantitySynergyProgress[3].push(synergy)\r\n                    }else if (diff === 0) {\r\n                        quantitySynergyProgress['completed'].push(synergy)\r\n                    }\r\n\r\n                    if(maxDiff === 1){\r\n                        qualitySynergyProgress[1].push(synergy)\r\n                    }else if (maxDiff === 2) {\r\n                        qualitySynergyProgress[2].push(synergy)\r\n                    }else if (maxDiff === 3) {\r\n                        qualitySynergyProgress[3].push(synergy)\r\n                    }else if (maxDiff === 4) {\r\n                        qualitySynergyProgress[3].push(synergy)\r\n                    }else if (maxDiff === 5) {\r\n                        qualitySynergyProgress[5].push(synergy)\r\n                    }else if (maxDiff === 0) {\r\n                        qualitySynergyProgress['completed'].push(synergy)\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        return [qualitySynergyProgress, quantitySynergyProgress];\r\n\r\n    }\r\n\r\n    getSynergyInfo(synergyList){\r\n\r\n        var synergyData = {};\r\n        for (var index in synergyList){\r\n            var synergy = synergyList[index];\r\n            if(!classData[synergy]){\r\n                //synergy not in classdata. Check originData\r\n                var synergyLevels = [];\r\n                for( var bonusRankIndex in originData[synergy][\"bonuses\"]){\r\n                    synergyLevels.push(originData[synergy][\"bonuses\"][bonusRankIndex][\"needed\"]);\r\n                }\r\n                synergyData[synergy] = synergyLevels;\r\n            }else{\r\n                //synergy in classData\r\n                synergyLevels = [];\r\n                for( bonusRankIndex in classData[synergy][\"bonuses\"]){\r\n                    synergyLevels.push(classData[synergy][\"bonuses\"][bonusRankIndex][\"needed\"]);\r\n                }\r\n                synergyData[synergy] = synergyLevels;\r\n            }\r\n        }\r\n        return synergyData;\r\n\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        const selected = this.state.selectedChamp>0;\r\n        return(\r\n            <div>\r\n                <div className =\"banner-wrapper\">\r\n                    <div className = \"banner\">\r\n                        <div className = \"top-right\">\r\n                            <div className = \"nav-language\">\r\n                                <h6><strike>Korean</strike></h6>\r\n                                <h6>English</h6>\r\n                            </div>\r\n                        </div>\r\n                        <div className = \"bottom\">\r\n                            <div>\r\n                                <h1>TEAM FIGHT TATICS</h1>\r\n                                <h2> Team Builder</h2>\r\n                            </div>\r\n                            <div className = \"nav-mainmenu\">\r\n                                <div >\r\n                                    <h5>Champions</h5>\r\n                                    <h5><strike>Items</strike></h5>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className = \"main-body\">\r\n                    <div className = \"result-wrapper sticky\">\r\n                        <div className = \"center\" >\r\n                            {/*\r\n                                this part is done by code.\r\n                                Depending on User's selection\r\n                                for default display empty area\r\n                            */}\r\n                            <table className = \"resultTable-wrapper padding \">\r\n                                <colgroup>\r\n                                    <col span=\"1\" width=\"25%\"/>\r\n                                    <col span=\"1\"/>\r\n                                </colgroup>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className=\"padding\">\r\n                                            <p>Team Result</p>\r\n                                        </td>\r\n                                        <td className=\"right padding\"><button onClick={this.buildTeam}> BUILD </button></td>\r\n                                    </tr>\r\n                                </thead>\r\n                                    <tbody >\r\n                                        <tr height = \"135\">\r\n                                            <td className=\"padding\">\r\n                                                <table className=\"selected-champ-wrapper\">\r\n                                                    <caption align=\"top\">Selected</caption>\r\n                                                    <tbody height=\"77\">\r\n                                                        <tr className = \"border\" height=\"72\">\r\n\r\n                                                            {/*need if statement here for empty cell <td><img/></td>*/}\r\n                                                            <td><table><tbody><tr>\r\n                                                                {this.printSelected()}\r\n                                                            </tr></tbody></table></td>\r\n\r\n                                                        </tr>\r\n\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </td>\r\n                                            <td>\r\n                                                <table>\r\n                                                    <caption align=\"top\">Generated</caption>\r\n                                                    <tbody>\r\n                                                        <tr height=\"72\">\r\n                                                            {/*get list of champs generated in <td><img/></td>*/}\r\n                                                            {this.printGenerated()}\r\n                                                        </tr>\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td colSpan=\"2\">\r\n                                                {this.printSynergy()}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n\r\n\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"sort-nav-wrapper\">\r\n                        <div className=\"center\">\r\n                        {/* http://jsfiddle.net/Kf6dD/ */}\r\n                            <div className=\"sort-nav\">\r\n                                <div>\r\n                                    <button onClick={this.sortSynClick}>sort by Synergy </button>\r\n                                    <button onClick={this.sortCostClick} >sort by Cost</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"champion-list-wrapper \">\r\n                        <div className =\"center\">\r\n                            {this.champSort()}\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Synergy;\r\n","import React from 'react';\nimport './App.css';\n\nimport Synergy from './synergy_champ'\n\nfunction App() {\n  return (\n\n    <div >      \n        <div>\n          <Synergy />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}