{"version":3,"sources":["Banner.js","ContentManage.js","DataManage.js","App.js","serviceWorker.js","index.js"],"names":["Banner","react_default","a","createElement","className","React","Component","ContentManage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCurrSynergy","champIDs","championIDs","synergies","index","champData","getChampInfo","j","traits","appliedSynergy","complete","incomplete","partial","synergy","synergyData","getTraitInfo","maxTraitValue","effects","length","minUnits","minTraitValue","curAmount","maxEffectReq","appliedEffect","nextEffectReq","maxUnits","getChampPortraitLink","champID","champName","name","replace","temp","charAt","toUpperCase","substring","toLowerCase","state","dataLink","html_createChampPortrait","key","imgLink","selectedChampions","includes","pbeChampions","src","alt","onClick","btn_imgClick","html_createChampGroupContainer","arguments","undefined","champImgs","champImg","push","generated","generatedChampions","selected","btn_teamBuild","maxChamp","btn_reset","html_createChampList","option","originData","db","champsBySynergy","classData","originChamps","classChamps","data","champDisplay","champsByCost","i","htmlFormat","html_resultGenerator","stateSyn","selectedSynergy","html_selected","html_generated","champs","concat","toConsumableArray","synHtml","syn","keys","subSyn","id","btn_ClickSyn","newBtn","synString","btn_buildWithSyn","btn_toggleSort","selectOpt","setState","target","splice","indexOf","stateGen","champToMove","synIndex","selChamps","newSelected","prevState","e","maxChampCount","workingCopy","validSpot","incompleteSynergy","partialSynergy","totalSynergy","assign","synergyToFind","countCheck","Math","floor","random","traitChamps","getTraitChampList","possibleChamps","src_Banner_0","disabled","DataManage","createData","Data","champions","origins","classes","champTrait","championCostList","sortDataByCost","championSynergyList","sortDataBySynergy","result","cost","getSpecificChampData","trait","champTraitsInfo","updatedList","apply","getSpecificTraitData","getChampWithTrait","champ","src_ContentManage_0","App","src_DataManage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.080f801c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Banner.css';\r\n\r\nclass Banner extends React.Component{\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className =\"banner-wrapper\">\r\n                <div className = \"banner\">\r\n                    <div className = \"top-right\">\r\n                        <div className = \"nav-language\">\r\n                            <h6><strike>Korean</strike></h6>\r\n                            <h6>English</h6>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"bottom\">\r\n                        <div>\r\n                            <h1>TEAM FIGHT TATICS</h1>\r\n                            <h2> Team Builder</h2>\r\n                        </div>\r\n                        <div className = \"nav-mainmenu\">\r\n                            <div >\r\n                                <h5>Champions</h5>\r\n                                <h5><strike>Items</strike></h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Banner;\r\n","import React from 'react';\r\nimport './ContentManage.css';\r\nimport Banner from './Banner';\r\n\r\nclass ContentManage extends React.Component{\r\n\r\n    //From DataMAnage.js\r\n    //this.props.db --> contains two dict\r\n    //  champsByCost where keys = 'cost'+i  && value = list of championID\r\n    //  champsBySynergy where keys = trait && value = list of championID\r\n    //this.props.getChampInfo --> takes param of champID and returns champion data\r\n    //this.props.getTraitInfo --> takes param of trait-name and returns its data\r\n\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            pbeChampions:[\"164\", \"126\", \"254\", \"222\"],\r\n            selectedChampions:[],\r\n            generatedChampions:[],\r\n            selectedSynergy:[],\r\n            maxChamp:10,\r\n            dataLink:'https://ddragon.leagueoflegends.com/cdn/9.12.1/img/champion/',\r\n            selectOpt:'synergy'\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getCurrSynergy=(champIDs)=>{\r\n        //returns detail of current synergy status\r\n        //each synergy is used as a key\r\n        //and values are in list such that [current Amount, appliedEffect, nextEffectReq, maxEffectReq]\r\n\r\n        let championIDs = champIDs;\r\n        let synergies = {};\r\n        for (var index in championIDs){\r\n            var champData = this.props.getChampInfo(championIDs[index]);\r\n            for(var j in champData.traits){\r\n                synergies[champData.traits[j]] = (synergies[champData.traits[j]]||0)+1;\r\n            }\r\n        }\r\n        let appliedSynergy = {\"complete\":[], \"incomplete\":[], \"partial\":[]};\r\n        for (var synergy in synergies){\r\n            let synergyData = this.props.getTraitInfo(synergy);\r\n            const maxTraitValue = synergyData.effects[synergyData.effects.length-1].minUnits;\r\n            const minTraitValue = synergyData.effects[0].minUnits;\r\n\r\n            let curAmount = synergies[synergy];\r\n            let maxEffectReq = maxTraitValue - curAmount;\r\n            let appliedEffect = 0;\r\n            let nextEffectReq = 0;\r\n\r\n            if(maxTraitValue <= synergies[synergy]){\r\n                appliedSynergy[\"complete\"][synergy]=maxTraitValue;\r\n            }else if (minTraitValue> curAmount) {\r\n                nextEffectReq = minTraitValue-curAmount\r\n                appliedSynergy[\"incomplete\"][synergy] = [curAmount, appliedEffect, nextEffectReq,maxEffectReq];\r\n\r\n            }else{\r\n                for (index in synergyData.effects){\r\n                    if(synergies[synergy]>= synergyData.effects[index].minUnits\r\n                        && synergies[synergy]<= synergyData.effects[index].maxUnits){\r\n\r\n                        appliedEffect = synergyData.effects[index].minUnits;\r\n                        nextEffectReq = synergyData.effects[index].maxUnits+1 - curAmount;\r\n                        appliedSynergy[\"partial\"][synergy]=[curAmount, appliedEffect,nextEffectReq, maxEffectReq];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return appliedSynergy;\r\n    }\r\n\r\n    getChampPortraitLink=(champID)=>{\r\n        const champData = this.props.getChampInfo(champID);\r\n        let champName = champData.name;\r\n        champName = champName.replace(/\\s+/g, '');\r\n        champName = champName.replace(\"'\", '');\r\n\r\n        //special case due to Database typo\r\n        if( champName ===\"ChoGath\" || champName ===\"KhaZix\" ){\r\n            let temp = champName.charAt(0).toUpperCase() + champName.substring(1).toLowerCase();\r\n            champName = temp;\r\n        }\r\n\r\n\r\n        const portraitLink = this.state.dataLink + champName + '.png'\r\n        return portraitLink;\r\n    }\r\n\r\n    html_createChampPortrait=(champID , key)=>{\r\n        const imgLink = this.getChampPortraitLink(champID);\r\n        let className = 'champImg';\r\n        if (this.state.selectedChampions.includes(champID)){\r\n            className = 'champImg active';\r\n        }\r\n\r\n        if (!this.state.pbeChampions.includes(champID)){\r\n            return(\r\n                <img\r\n                className={className}\r\n                name={champID}\r\n                key={key}\r\n                src = {imgLink}\r\n                alt = {champID}\r\n                onClick={() => this.btn_imgClick(champID)}/>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className='pbeChamp' key={key}>\r\n\r\n                    <img\r\n                    className={className}\r\n                    name={champID}\r\n                    src = {imgLink}\r\n                    alt = {champID}\r\n                    onClick={() => this.btn_imgClick(champID)}/>\r\n                    <p className = 'pbeSign'>PBE</p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    html_createChampGroupContainer=(champIDs, key = null)=>{\r\n        let champImgs = [];\r\n        for(var index in champIDs){\r\n            const champImg = this.html_createChampPortrait(champIDs[index] , index);\r\n            champImgs.push(champImg);\r\n        }\r\n        const generated = this.state.generatedChampions;\r\n        const selected = this.state.selectedChampions;\r\n        if(key === \"Generated\" && generated.length===0){\r\n            return(\r\n                <div className = \"genselBox\" key = {key}>\r\n                    <div className = \"champGroup\" key = {key}>\r\n                        <h5>{key}</h5>\r\n                        <button className = \"buildBtn\" onClick = {this.btn_teamBuild}> Build </button>\r\n                    </div>\r\n                    <div className = \"btnCase\">\r\n                    </div>\r\n                </div>\r\n            )\r\n        }else if(key === \"Generated\" ){\r\n            return(\r\n                <div className = \"genselBox\" key = {key}>\r\n                    <div className = \"champGroup\" key = {key}>\r\n                        <h5>{key}</h5>\r\n                        {champImgs}\r\n                    </div>\r\n                    <div className = \"btnCase\">\r\n                        <button className=\"test\" onClick = {this.btn_teamBuild}>reBuild</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if(key === \"Selected\" && selected.length===0){\r\n            key = \"Selected \" + this.state.selectedChampions.length + \"/\"+ this.state.maxChamp ;\r\n            return(\r\n                <div className = \"genselBox\" key = {key}>\r\n                    <div className = \"champGroup\" key = {key}>\r\n                        <h5>{key}</h5>\r\n                        {champImgs}\r\n                    </div>\r\n                    <div className = \"btnCase\">\r\n\r\n                    </div>\r\n                </div>\r\n            )\r\n        }else if(key === \"Selected\" && selected.length>0){\r\n            key = \"Selected \" + this.state.selectedChampions.length + \"/\"+ this.state.maxChamp ;\r\n            return(\r\n                <div className = \"genselBox\" key = {key}>\r\n                    <div className = \"champGroup\" key = {key}>\r\n                        <h5>{key}</h5>\r\n                        {champImgs}\r\n                    </div>\r\n                    <div className = \"btnCase\">\r\n                        <button className=\"test\" onClick = {this.btn_reset}>reset</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className = \"champGroup\" key = {key}>\r\n                <h5 className=\"synergyClick\">{key}</h5>\r\n                {champImgs}\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    html_createChampList=(option)=>{\r\n        if (option === \"synergy\"){\r\n            let originData = this.props.db.champsBySynergy[\"origins\"];\r\n            let classData = this.props.db.champsBySynergy[\"classes\"];\r\n            let originChamps =[];\r\n            for(var synergy in originData){\r\n                let champIDs = originData[synergy];\r\n                originChamps.push(this.html_createChampGroupContainer(champIDs, synergy))\r\n            }\r\n\r\n            let classChamps =[];\r\n            for(synergy in classData){\r\n                let champIDs = classData[synergy];\r\n                classChamps.push(this.html_createChampGroupContainer(champIDs, synergy))\r\n            }\r\n            return(\r\n                <div className = \"container\">\r\n                    <h3>Origin</h3>\r\n                    <div className = \"champSubContainer\">\r\n                        {originChamps}\r\n                    </div>\r\n                    <h3>Class</h3>\r\n                    <div className = \"champSubContainer\">\r\n                        {classChamps}\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        }else{\r\n            let data = {};\r\n            let champDisplay = [];\r\n            data = this.props.db.champsByCost;\r\n            for(var i = 1; i<=5 ; i++){\r\n                let key = 'cost'+i;\r\n                let champIDs = data[key];\r\n                let htmlFormat = (\r\n                    <div className=\"champSubContainer\" key = {key}>\r\n                        <div>\r\n                            {this.html_createChampGroupContainer(champIDs,'Cost: '+i)}\r\n                        </div>\r\n                    </div>\r\n                )\r\n\r\n                champDisplay.push(htmlFormat)\r\n            }\r\n\r\n            return(\r\n                <div className = \"container\">\r\n                    {champDisplay}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    html_resultGenerator=()=>{\r\n        const selected = this.state.selectedChampions;\r\n        const generated = this.state.generatedChampions;\r\n        const stateSyn = this.state.selectedSynergy;\r\n        const html_selected = this.html_createChampGroupContainer(selected,'Selected')\r\n        const html_generated = this.html_createChampGroupContainer(generated,'Generated')\r\n        let champs = [...selected,...generated];\r\n        let synergy = this.getCurrSynergy(champs);\r\n        let synHtml = [];\r\n        for (var syn in synergy){\r\n            if(syn === \"complete\" && Object.keys(synergy[syn]).length>0){\r\n                for (var subSyn in synergy[syn] ){\r\n                    let className = \"synergy complete\";\r\n                    if (stateSyn.includes(subSyn)){\r\n                        className += \" synBorder\";\r\n                    }\r\n                    synHtml.push(\r\n                        <span key ={subSyn} id = {subSyn} className ={className} onClick={this.btn_ClickSyn}>\r\n                        {subSyn + \" (\" + synergy[syn][subSyn] + \")\"}\r\n                        </span>\r\n                    )\r\n                }\r\n\r\n            }else if (syn !==\"incomplete\" && syn !== \"complete\"){\r\n\r\n                for (subSyn in synergy[syn] ){\r\n                    let className = \"synergy partial\";\r\n                    if (stateSyn.includes(subSyn)){\r\n                        className += \" synBorder\";\r\n                    }\r\n                    synHtml.push(\r\n                        <span key ={subSyn} id = {subSyn} className ={className} onClick={this.btn_ClickSyn}>\r\n                        {subSyn + \" (\" + synergy[syn][subSyn][1] + \")\"}\r\n                        </span>\r\n\r\n                    )\r\n                }\r\n\r\n            }\r\n        }\r\n        let newBtn = [];\r\n        let synString = <h5>Synergy</h5>;\r\n        if (this.state.generatedChampions.length>0){\r\n            synString = <h5>Synergy -<p>(select Synergy you want to build with)</p></h5>\r\n        }\r\n        if(this.state.selectedSynergy.length>0){\r\n            newBtn.push(<button className=\"synBtn\" key =\"buidlSyn\" onClick = {this.btn_buildWithSyn}> Build With <br/> Synergy </button>)            \r\n        }\r\n\r\n        return(\r\n            <div className=\"container resultBox\">\r\n                <div className=\"overideContainer\">\r\n                    {html_selected}\r\n                    {html_generated}\r\n\r\n                    <div >\r\n                        <div className=\"synergyBox inline\">\r\n                            <span className = \"inline\">\r\n                                {synString}\r\n                            </span>\r\n                            <div className=\"synContainer\">\r\n                            {synHtml}\r\n                            </div>\r\n                        </div>\r\n                    {newBtn}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    btn_toggleSort=()=> {\r\n        if(this.state.selectOpt === \"synergy\"){\r\n            this.setState({\r\n                selectOpt:\"cost\"\r\n            });\r\n        }else{\r\n            this.setState({\r\n                selectOpt:\"synergy\"\r\n            });\r\n        }\r\n    }\r\n    btn_reset =()=>{\r\n        this.setState({\r\n            selectedChampions:[],\r\n            generatedChampions:[],\r\n            selectedSynergy:[]\r\n        })\r\n    }\r\n\r\n    btn_ClickSyn =(synergy)=> {\r\n        let stateSyn = [];\r\n        if(this.state.selectedSynergy.length>0){\r\n            stateSyn = [...this.state.selectedSynergy];\r\n        }\r\n\r\n        if(!stateSyn.includes(synergy.target.id)){\r\n            stateSyn.push(synergy.target.id);\r\n        }else {\r\n            stateSyn.splice(stateSyn.indexOf(synergy.target.id),1)\r\n        }\r\n        this.setState({\r\n            /*generatedChampions:newGen,*/\r\n            selectedSynergy:stateSyn\r\n        })\r\n    }\r\n    btn_buildWithSyn = ()=>{\r\n        const stateGen = this.state.generatedChampions;\r\n        const stateSyn =[...this.state.selectedSynergy];\r\n\r\n        let champToMove =[];\r\n        for(var synIndex in stateSyn){\r\n            let synergy = stateSyn[synIndex];\r\n            for (var index in stateGen){\r\n                let champData = this.props.getChampInfo(stateGen[index]);\r\n                if(champData.traits.includes(synergy)){\r\n                    if(!champToMove.includes(stateGen[index])){\r\n                        champToMove.push(stateGen[index]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (index in champToMove){\r\n            this.btn_imgClick(champToMove[index]);\r\n        }\r\n\r\n\r\n        // let gen = [...this.state.generatedChampions];\r\n        // let newGen = [];\r\n        // for (index in gen){\r\n        //     if(!champToMove.includes(gen[index])){\r\n        //         newGen.push(gen[index])\r\n        //     }\r\n        // }\r\n        // this.setState({\r\n        //     generatedChampions:newGen,\r\n        //     selectedSynergy:[]\r\n        // })\r\n        const selChamps=this.state.selectedChampions;\r\n        this.btn_teamBuild(null,[...selChamps,...champToMove]);\r\n    }\r\n\r\n    btn_imgClick=(champID)=>{\r\n        const selected = this.state.selectedChampions;\r\n        const generated = [...this.state.generatedChampions];\r\n        if(!selected.includes(champID) ){\r\n            if(selected.length < this.state.maxChamp){ //add selected champ to selected\r\n                this.setState(function(prevState){\r\n                    return{\r\n                        selectedChampions:[...prevState.selectedChampions,champID],\r\n                        selectedSynergy:[]\r\n                    }\r\n                });\r\n            }\r\n            if(generated.includes(champID)){ //remove champ from generated since champ moved to selectedList\r\n\r\n                generated.splice(generated.indexOf(champID),1);\r\n\r\n                this.setState(function(prevState){\r\n                    return{\r\n                        generatedChampions:generated\r\n                    }\r\n                });\r\n\r\n            }\r\n            else if(!generated.includes(champID) && generated.length>0){\r\n                this.setState(function(prevState){\r\n                    return{\r\n                        generatedChampions:[]\r\n                    }\r\n                });\r\n            }\r\n\r\n        }else{\r\n            let newSelected = [...selected];\r\n            newSelected.splice(newSelected.indexOf(champID),1);\r\n            this.setState({\r\n                selectedChampions:newSelected\r\n            });\r\n        }\r\n    }\r\n\r\n    btn_teamBuild=(e, selected = null)=>{\r\n\r\n        if (selected === null){\r\n            selected = this.state.selectedChampions;\r\n        }\r\n        const maxChampCount = this.state.maxChamp;\r\n        let generated = [];\r\n        let workingCopy =[];\r\n\r\n        if(Object.keys(selected).length>0){\r\n            var validSpot = maxChampCount - selected.length;\r\n            workingCopy = [...selected,...generated];\r\n\r\n            while(validSpot>0){\r\n                var synergyData = this.getCurrSynergy(workingCopy);\r\n                let incompleteSynergy = synergyData[\"incomplete\"];\r\n                let partialSynergy = synergyData[\"partial\"];\r\n\r\n\r\n                let totalSynergy = Object.assign({}, incompleteSynergy, partialSynergy);\r\n\r\n                let synergyToFind = [];\r\n                let countCheck=10000;\r\n                for (var synergy in totalSynergy){\r\n                    if (totalSynergy[synergy][3] <countCheck){\r\n                        countCheck = totalSynergy[synergy][3];\r\n                        synergyToFind=[synergy];\r\n                    }else if(totalSynergy[synergy][3] === countCheck){\r\n                        synergyToFind.push(synergy);\r\n                    }\r\n                }\r\n                let selectedSynergy = synergyToFind[Math.floor(Math.random() * synergyToFind.length)]\r\n                let traitChamps = this.props.getTraitChampList(selectedSynergy);\r\n                let possibleChamps =[]\r\n                for (var index in traitChamps){\r\n                    if (!workingCopy.includes(traitChamps[index])){\r\n                        possibleChamps.push(traitChamps[index]);\r\n                    }\r\n                }\r\n                let champID =possibleChamps[Math.floor(Math.random() * possibleChamps.length)];\r\n                workingCopy.push(champID);\r\n                generated.push(champID);\r\n                validSpot -=1;\r\n            }\r\n            this.setState({\r\n                generatedChampions:workingCopy.splice(selected.length),\r\n                selectedSynergy:[]\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div name = \"Web Page\">\r\n                <Banner />\r\n            {/*console.log(this.state.selectedChampions)*/}\r\n                {this.html_resultGenerator()}\r\n                <div className = \"container\">\r\n                    <button className=\"sortNavBtn\"\r\n                            disabled = {this.state.selectOpt === \"synergy\"}\r\n                            onClick={this.btn_toggleSort}\r\n                    >\r\n                        Synergy\r\n                    </button>\r\n                    <button className=\"sortNavBtn\"\r\n                            disabled = {this.state.selectOpt === \"cost\"}\r\n                            onClick={this.btn_toggleSort}\r\n                    >\r\n                    Cost\r\n                    </button>\r\n                </div>\r\n                {this.html_createChampList(this.state.selectOpt)}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContentManage;\r\n","import React from 'react';\r\nimport Data from './assets/en_us_TFT'\r\nimport ContentManage from './ContentManage'\r\n\r\nclass DataManage extends React.Component{\r\n\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            champsByCost:{},\r\n            champsBySynergy:{}\r\n        }\r\n    }\r\n\r\n    createData=()=>{\r\n        const championIDs = Object.keys(Data.champions);\r\n        let origins =[];\r\n        let classes =[];\r\n        for (var champID in Data.champions){\r\n            const champTrait = Data.champions[champID].traits;\r\n            origins.push(champTrait[0]);\r\n            classes.push(champTrait[champTrait.length-1]);\r\n        }\r\n\r\n        let championCostList = {};\r\n        championCostList = this.sortDataByCost(championIDs);\r\n\r\n        let championSynergyList = {};\r\n        championSynergyList = this.sortDataBySynergy(origins,classes);\r\n\r\n\r\n\r\n\r\n        this.setState({\r\n            champsByCost:championCostList,\r\n            champsBySynergy:championSynergyList\r\n        })\r\n\r\n    }\r\n\r\n    sortDataByCost=(championIDs)=>{\r\n        let result= {};\r\n        for (var index in championIDs){\r\n            const champID = championIDs[index];\r\n            const champInfo = this.getSpecificChampData(champID);\r\n            const cost = champInfo.cost;\r\n            result['cost'+cost] = (result['cost'+cost]||[]);\r\n            result['cost'+cost].push(champID)\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    sortDataBySynergy=(origins, classes)=>{\r\n        let result = {\r\n            \"origins\":{},\r\n            \"classes\":{}\r\n        };\r\n        let trait=\"\";\r\n        for(var index in origins){\r\n            trait = origins[index];\r\n            result[\"origins\"][trait] = result[\"origins\"][trait]||[];\r\n        }\r\n        for(index in classes){\r\n            trait = classes[index];\r\n            result[\"classes\"][trait] = result[\"classes\"][trait]||[];\r\n        }\r\n\r\n        const champData = Data.champions;\r\n        for( var champID in champData){\r\n            const champTraitsInfo = champData[champID].traits;\r\n            for(index in champTraitsInfo){\r\n                if(Object.keys(result[\"origins\"]).includes(champTraitsInfo[index])){\r\n                    result[\"origins\"][champTraitsInfo[index]] = result[\"origins\"][champTraitsInfo[index]] ||[];\r\n                    result[\"origins\"][champTraitsInfo[index]].push(champID);\r\n                }else{\r\n                    result[\"classes\"][champTraitsInfo[index]] = result[\"classes\"][champTraitsInfo[index]] ||[];\r\n                    result[\"classes\"][champTraitsInfo[index]].push(champID);\r\n                }\r\n            }\r\n        }\r\n        //sort by cost\r\n        for (trait in result[\"origins\"]){\r\n            const temp = this.sortDataByCost(result[\"origins\"][trait])\r\n            let updatedList = [];\r\n            for(var i=1;i<=5;i++){\r\n                if(typeof temp['cost'+i] !== 'undefined'){\r\n                    updatedList.push.apply(updatedList,temp['cost'+i])\r\n                }\r\n            }\r\n            result[\"origins\"][trait] = updatedList;\r\n        }\r\n        for (trait in result[\"classes\"]){\r\n            const temp = this.sortDataByCost(result[\"classes\"][trait])\r\n            let updatedList = [];\r\n            for(i=1;i<=5;i++){\r\n                if(typeof temp['cost'+i] !== 'undefined'){\r\n                    updatedList.push.apply(updatedList,temp['cost'+i])\r\n                }\r\n            }\r\n            result[\"classes\"][trait] = updatedList;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    getSpecificChampData=(champID)=>{\r\n        return( Data.champions[champID]);\r\n    }\r\n\r\n    getSpecificTraitData = (trait)=>{\r\n        for(var i in Data.traits){\r\n            if(Data.traits[i].name === trait){\r\n                return(Data.traits[i]);\r\n            }\r\n        }\r\n\r\n    }\r\n    getChampWithTrait = (trait)=>{\r\n        let result = [];\r\n        for (var champ in Data.champions){\r\n\r\n            if(Data.champions[champ][\"traits\"].includes(trait)){\r\n                result.push(champ);\r\n            }\r\n\r\n        }\r\n        return result;\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.createData();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ContentManage\r\n                    db={this.state}\r\n                    getChampInfo={this.getSpecificChampData}\r\n                    getTraitInfo={this.getSpecificTraitData}\r\n                    getTraitChampList = {this.getChampWithTrait}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default DataManage;\r\n","import React from 'react';\n\nimport DataManage from './DataManage'\n\nfunction App() {\n  return (\n    <div>\n        <DataManage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}