{"version":3,"sources":["synergy_champ.js","App.js","serviceWorker.js","index.js"],"names":["Synergy","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataLink","selectedChamp","generatedChamp","gainedSynergy","champClick","bind","assertThisInitialized","possibleSynergy","printSynergy","champList","selected","i","a","colorCodeCost","push","list","map","champ","react_default","createElement","length","onClick","data","synergies","keys","complete","partial","console","log","apply","comp","class","b","syn","result","classSynergy","classData","champs","findSynergyChamp","temp","j","div","table","e","test","includes","target","id","className","replace","splice","indexOf","setState","cost","champData","frameClass","key","src","alt","generatedList","selectedList","validSpot","neededSynergies","getPlayerHandInfo","qualitySynergies","random","selectedSynergy","Math","floor","findSynergyNotInHand","randomChamp","quantitySynergies","synCurrStat","currSynergy","synCount","toLowerCase","synMap","getSynergyInfo","synResult","synergy","charAt","toUpperCase","slice","champInfo","hand","index","championList","quantitySynergyProgress","1","2","3","completed","qualitySynergyProgress","4","5","synergyCount","origins","classes","originIndex","champOrigin","classIndex","champClass","synergyLevelMap","currSynergyCount","diff","maxDiff","synergyList","synergyData","bonusRankIndex","synergyLevels","originData","_this2","height","align","colSpan","imageSort","React","Component","App","src_synergy_champ","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.752948d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './synergy_champ.css';\r\n\r\nimport champData from './jsonData/champions.json';\r\nimport classData from './jsonData/classes.json';\r\nimport originData from './jsonData/origins.json';\r\n\r\n\r\n\r\nclass Synergy extends React.Component {\r\n\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            dataLink : 'https://ddragon.leagueoflegends.com/cdn/9.12.1/img/champion/',\r\n            selectedChamp : [],\r\n            generatedChamp: [],\r\n            gainedSynergy: {}\r\n        }\r\n        this.champClick = this.champClick.bind(this);\r\n        this.possibleSynergy =this.possibleSynergy.bind(this);\r\n        this.printSynergy = this.printSynergy.bind(this);\r\n    }\r\n\r\n    testing(){\r\n        var champList = this.state.selectedChamp;\r\n        var selected = [];\r\n        for (var i in champList){\r\n            var a = this.colorCodeCost(champList[i])\r\n            selected.push(a);\r\n        }\r\n\r\n\r\n        var list = selected.map(function(champ){\r\n            return  <td>{champ}</td>\r\n        })\r\n        return (\r\n            <table>\r\n                <tbody>\r\n                    {list}\r\n                    {list.length >0 &&\r\n                        <tr> <button onClick = {this.possibleSynergy}> generate </button> </tr>\r\n                    }\r\n\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    printSynergy(){\r\n        var data = this.state.gainedSynergy;\r\n        var synergies = Object.keys(data);\r\n        var complete = [];\r\n        var partial = [];\r\n        if(synergies.length>0){\r\n            for (var i in synergies){\r\n                if (synergies[i]+'' == \"completed\"){\r\n                    console.log(\"??A?SD\", data[\"completed\"])\r\n                    complete.push.apply(complete,data[\"completed\"]);\r\n                }\r\n                else{\r\n                    partial.push(synergies[i]+\" (\"+data[synergies[i]]+\")\");\r\n                }\r\n            }\r\n\r\n            console.log(complete)\r\n            var a = complete.map(function(comp){\r\n                return <tr><td class = \"synergyContainer\">{comp}</td></tr>\r\n            });\r\n            var b = partial.map(function(syn){\r\n                return <tr><td class = \"synergyContainer\">{syn}</td></tr>\r\n            });\r\n            return(\r\n                <table class=\"synergy\">\r\n                    <tbody class = \"synergyContainer\">\r\n                        <td >{a}</td>\r\n                        <td >{b}</td>\r\n                    </tbody>\r\n                </table>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    imageSort(){\r\n\r\n        var result =[];\r\n        var classSynergy = Object.keys(classData);\r\n        for (var i in classSynergy){\r\n            var champs = this.findSynergyChamp(classSynergy[i]);\r\n            var temp =[];\r\n            for (var j in champs){\r\n\r\n                temp.push (this.colorCodeCost(champs[j]));\r\n            }\r\n            var list = temp.map(function(champ){\r\n                return <th >{champ}</th>;\r\n            })\r\n            var div = <tr>{list}</tr>;\r\n            result.push(div);\r\n        }\r\n\r\n        var table = result.map(function(syn){\r\n            return <thead >{syn}</thead>;\r\n        })\r\n\r\n        return <table>{table}</table>\r\n\r\n\r\n    }\r\n\r\n    champClick(e){\r\n\r\n        var test = this.state.selectedChamp;\r\n\r\n        if(test.length<10){\r\n            if (!test.includes(e.target.id)){\r\n                e.target.className += \" clicked\"\r\n                test.push(e.target.id)\r\n                this.setState(state => ({\r\n                    selectedChamp: test\r\n                }));\r\n            }else{\r\n                e.target.className = e.target.className.replace(' clicked', '');\r\n                test.splice(test.indexOf(e.target.id),1);\r\n                this.setState(state => ({\r\n                    selectedChamp: test\r\n                }));\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    colorCodeCost(champ){\r\n        //give champion colored frame based on their cost\r\n\r\n\r\n\r\n        var cost = champData[champ][\"cost\"];\r\n        var frameClass = 'champ-Frame';\r\n        if (cost === 1){\r\n            frameClass += ' cost1'\r\n        }\r\n        else if (cost===2) {\r\n            frameClass += ' cost2'\r\n        }\r\n        else if (cost===3) {\r\n            frameClass += ' cost3'\r\n        }\r\n        else if (cost===4) {\r\n            frameClass += ' cost4'\r\n        }\r\n        else if (cost===5) {\r\n            frameClass += ' cost5'\r\n        }\r\n        return (\r\n            <img className={frameClass}\r\n            key ={champ}\r\n            id = {champ}\r\n            src = {this.state.dataLink + champ + '.png'}\r\n            alt = {champ}\r\n            onClick = {this.champClick} />\r\n        )\r\n    }\r\n\r\n    possibleSynergy(){\r\n\r\n        var generatedList = [];\r\n        var selectedList = this.state.selectedChamp;\r\n        var champList =[];\r\n        var maxChampCount = 9;\r\n\r\n        var validSpot = maxChampCount - selectedList.length;\r\n        champList.push.apply(champList, selectedList);\r\n        champList.push.apply(champList, generatedList);\r\n\r\n        while(validSpot > 0){ //change to while(validSpot > 0)\r\n\r\n            var neededSynergies = this.getPlayerHandInfo(champList);\r\n            //neededSynergies = [quality, quantity]\r\n            //quality mainly focuses on reaching max bonuses on required synergy\r\n            //quantity focuses on reaching many partial bonuses\r\n\r\n            var qualitySynergies ={};\r\n            for (var i = 1; i <=validSpot ; i++){\r\n                if( (typeof neededSynergies[0][i] !== 'undefined') && neededSynergies[0][i].length > 0 ){\r\n                    qualitySynergies[i] = neededSynergies[0][i];\r\n                }\r\n            }\r\n\r\n            var random = Object.keys(qualitySynergies);\r\n            //console.log(qualitySynergies , validSpot)\r\n            if(random.length > 0){\r\n                random = random[Math.floor(Math.random()*random.length)]; //random == needed champ to reach max bonus\r\n                var selectedSynergy = qualitySynergies[random];\r\n                selectedSynergy = selectedSynergy[Math.floor(Math.random()*selectedSynergy.length)];\r\n\r\n                var selectedChamp = this.findSynergyChamp(selectedSynergy);\r\n                selectedChamp = this.findSynergyNotInHand(champList, selectedChamp);\r\n                for(i = 0; i<=random-1; i++){\r\n                    var randomChamp = selectedChamp[Math.floor(Math.random()*selectedChamp.length)];\r\n                    selectedChamp.splice( selectedChamp.indexOf(randomChamp), 1 );\r\n                    champList.push(randomChamp)\r\n\r\n                }\r\n                validSpot -= random;\r\n            }else{\r\n\r\n                var quantitySynergies = {};\r\n                for(i = 1; i<=validSpot;i++){\r\n                    if((typeof neededSynergies[1][i] !== 'undefined') && neededSynergies[1][i].length > 0){\r\n                        quantitySynergies[i] = neededSynergies[1][i];\r\n                    }\r\n                }\r\n\r\n                random = Object.keys(quantitySynergies);\r\n\r\n                if(random.length > 0){\r\n                    random = random[Math.floor(Math.random()*random.length)];\r\n                    selectedSynergy = quantitySynergies[random];\r\n                    if(random.length === 2){\r\n                            selectedSynergy.push.apply(selectedSynergy,[\"guardian\",\"dragon\"])\r\n                    }\r\n                }else{\r\n                    random = 1;\r\n                    selectedSynergy = [\"exile\", \"robot\"]\r\n                }\r\n                selectedSynergy = selectedSynergy[Math.floor(Math.random()*selectedSynergy.length)];\r\n\r\n                selectedChamp = this.findSynergyChamp(selectedSynergy);\r\n                selectedChamp = this.findSynergyNotInHand(champList, selectedChamp);\r\n\r\n                for(i = 0; i<=random-1; i++){\r\n                    var randomChamp = selectedChamp[Math.floor(Math.random()*selectedChamp.length)];\r\n                    selectedChamp.splice( selectedChamp.indexOf(randomChamp), 1 );\r\n                    champList.push(randomChamp)\r\n                }\r\n                validSpot -= random;\r\n            }\r\n        }\r\n\r\n        for (i in champList){\r\n            //console.log(champList[i],originList)\r\n            if (!selectedList.includes(champList[i])){\r\n                generatedList.push(champList[i]);\r\n            }\r\n        }\r\n\r\n\r\n        var synCurrStat = this.getPlayerHandInfo(champList)[0];\r\n        var currSynergy = [];\r\n\r\n        for (i=1; i<=5;i++){\r\n            if(synCurrStat[i].length>0){\r\n                currSynergy.push.apply(currSynergy,synCurrStat[i]);\r\n            }\r\n        }\r\n\r\n        var synCount = {}\r\n        for (i in currSynergy){\r\n            synCount[currSynergy[i]] = 0;\r\n        }\r\n\r\n        for (i in champList){\r\n            for(var j in champData[champList[i]][\"origin\"]){\r\n                synCount[champData[champList[i]][\"origin\"][j].toLowerCase()] +=1;\r\n            }\r\n            for(j in champData[champList[i]][\"class\"]){\r\n                synCount[champData[champList[i]][\"class\"][j].toLowerCase()] +=1;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        var synMap = this.getSynergyInfo(currSynergy);\r\n\r\n        var synResult = {};\r\n        for (i in currSynergy){\r\n            for (var j in synMap[currSynergy[i]]){\r\n                if (synCount[currSynergy[i]]>=synMap[currSynergy[i]][j]){\r\n                    synResult[currSynergy[i]] = synMap[currSynergy[i]][j]\r\n                }\r\n            }\r\n        }\r\n\r\n        synResult[\"completed\"] = synCurrStat[\"completed\"]\r\n\r\n        console.log(generatedList)\r\n        console.log(synCurrStat)\r\n        console.log(synCount)\r\n        console.log(synResult);\r\n\r\n\r\n        this.setState((state) =>{\r\n            return{\r\n                generatedChamp:generatedList,\r\n                gainedSynergy: synResult\r\n            };\r\n        });\r\n    }\r\n\r\n    findSynergyChamp(synergy){\r\n        //find all champions with given synergy\r\n\r\n        synergy = synergy.charAt(0).toUpperCase() + synergy.slice(1)\r\n        var result = [];\r\n        var champList = Object.keys(champData);\r\n\r\n        for(var champ in champList){\r\n            var champInfo = champData[champList[champ]];\r\n            if(champInfo['class'].includes(synergy)){\r\n                result.push(champInfo['key']);\r\n            }else if(champInfo['origin'].includes(synergy)){\r\n                result.push(champInfo['key']);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    findSynergyNotInHand(hand, champList){\r\n        // from given champ list return champions thats not in player's hand\r\n\r\n        var result = [];\r\n        for (var index in champList){\r\n\r\n            if(!hand.includes(champList[index])){\r\n                result.push(champList[index])\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getPlayerHandInfo(championList){\r\n        //get details on champions player has\r\n\r\n\r\n        var quantitySynergyProgress = {\r\n            1:[],\r\n            2:[],\r\n            3:[],\r\n            \"completed\":[]\r\n        }\r\n        var qualitySynergyProgress = {\r\n            1:[],\r\n            2:[],\r\n            3:[],\r\n            4:[],\r\n            5:[],\r\n            \"completed\":[]\r\n        }\r\n\r\n        var synergyCount = {}\r\n        for (var index in championList){\r\n            var champInfo = champData[championList[index]];\r\n            var origins = champInfo[\"origin\"];\r\n            var classes = champInfo[\"class\"];\r\n            for(var originIndex in origins){\r\n                var champOrigin = origins[originIndex].toLowerCase();\r\n                synergyCount[champOrigin] = (synergyCount[champOrigin]||0)+1;\r\n            }\r\n            for(var classIndex in classes){\r\n                var champClass = classes[classIndex].toLowerCase();\r\n                synergyCount[champClass] = (synergyCount[champClass]||0)+1;\r\n            }\r\n        }\r\n\r\n        var synergyLevelMap = this.getSynergyInfo(Object.keys(synergyCount));\r\n        for( var synergy in synergyLevelMap){\r\n            var currSynergyCount = synergyCount[synergy]\r\n            for(var i = 0; i<= synergyLevelMap[synergy].length-1;i++){\r\n                if(currSynergyCount <= synergyLevelMap[synergy][i]){\r\n                    var diff = synergyLevelMap[synergy][i] -currSynergyCount;\r\n                    var maxDiff =\r\n                        synergyLevelMap[synergy][synergyLevelMap[synergy].length-1]\r\n                        - currSynergyCount;\r\n\r\n                    if(diff === 1){\r\n                        quantitySynergyProgress[1].push(synergy)\r\n                    }else if (diff === 2) {\r\n                        quantitySynergyProgress[2].push(synergy)\r\n                    }else if (diff === 3) {\r\n                        quantitySynergyProgress[3].push(synergy)\r\n                    }else if (diff === 0) {\r\n                        quantitySynergyProgress['completed'].push(synergy)\r\n                    }\r\n\r\n                    if(maxDiff === 1){\r\n                        qualitySynergyProgress[1].push(synergy)\r\n                    }else if (maxDiff === 2) {\r\n                        qualitySynergyProgress[2].push(synergy)\r\n                    }else if (maxDiff === 3) {\r\n                        qualitySynergyProgress[3].push(synergy)\r\n                    }else if (maxDiff === 4) {\r\n                        qualitySynergyProgress[3].push(synergy)\r\n                    }else if (maxDiff === 5) {\r\n                        qualitySynergyProgress[5].push(synergy)\r\n                    }else if (maxDiff === 0) {\r\n                        qualitySynergyProgress['completed'].push(synergy)\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        return [qualitySynergyProgress, quantitySynergyProgress];\r\n\r\n    }\r\n\r\n    getSynergyInfo(synergyList){\r\n\r\n        var synergyData = {};\r\n        for (var index in synergyList){\r\n            var synergy = synergyList[index];\r\n            if(!classData[synergy]){\r\n                //synergy not in classdata. Check originData\r\n                var synergyLevels = [];\r\n                for( var bonusRankIndex in originData[synergy][\"bonuses\"]){\r\n                    synergyLevels.push(originData[synergy][\"bonuses\"][bonusRankIndex][\"needed\"]);\r\n                }\r\n                synergyData[synergy] = synergyLevels;\r\n            }else{\r\n                //synergy in classData\r\n                synergyLevels = [];\r\n                for( bonusRankIndex in classData[synergy][\"bonuses\"]){\r\n                    synergyLevels.push(classData[synergy][\"bonuses\"][bonusRankIndex][\"needed\"]);\r\n                }\r\n                synergyData[synergy] = synergyLevels;\r\n            }\r\n        }\r\n        return synergyData;\r\n\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        const selected = this.state.selectedChamp>0;\r\n        return(\r\n            <div>\r\n                <div className =\"banner-wrapper\">\r\n                    <div className = \"banner\">\r\n                        <div className = \"top-right\">\r\n                            <div className = \"nav-language\">\r\n                                <h6><strike>Korean</strike></h6>\r\n                                <h6>English</h6>\r\n                            </div>\r\n                        </div>\r\n                        <div className = \"bottom\">\r\n                            <div>\r\n                                <h1>TEAM FIGHT TATICS</h1>\r\n                                <h2> Team Builder</h2>\r\n                            </div>\r\n                            <div className = \"nav-mainmenu\">\r\n                                <div >\r\n                                    <h5>Champions</h5>\r\n                                    <h5><strike>Items</strike></h5>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className = \"main-body\">\r\n                    <div className = \"result-wrapper\">\r\n                        <div className = \"center\" >\r\n                            {/*\r\n                                this part is done by code.\r\n                                Depending on User's selection\r\n                                for default display empty area\r\n                            */}\r\n                            <table className = \"resultTable-wrapper\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <p>Team Result</p>\r\n                                        </td>\r\n                                        <td className=\"right\"><a> BUILD </a></td>\r\n                                    </tr>\r\n                                </thead>\r\n                                    <tbody>\r\n                                        <tr height = \"135\">\r\n                                            <td>\r\n                                                <table className=\"selected-champ-wrapper\">\r\n                                                    <caption align=\"top\">Selected</caption>\r\n                                                    <tbody>\r\n\r\n                                                        <tr className = \"border\" height=\"70\">\r\n\r\n                                                            {/*need if statement here for empty cell <td><img/></td>*/}\r\n                                                            {console.log(selected)}\r\n                                                            {!selected ? (\r\n                                                                this.state.selectedChamp.map((champ) =>\r\n                                                                <td><img className = \"champ-Frame\" src ={this.state.dataLink+champ+\".png\"}/></td>)\r\n                                                            ) : (\r\n                                                                <td></td>)}\r\n\r\n\r\n                                                        </tr>\r\n\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </td>\r\n                                            <td>\r\n                                                <table>\r\n                                                    <caption align=\"top\">Generated</caption>\r\n                                                    <tbody>\r\n                                                        <tr height=\"70\">\r\n                                                            {/*get list of champs generated in <td><img/></td>*/}\r\n                                                        </tr>\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td colSpan=\"2\">\r\n                                            <table>\r\n                                                <tbody>\r\n                                                    <tr height=\"45px\">\r\n                                                        <td>\r\n                                                        {/*get synergy */}\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n\r\n\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"sort-nav-wrapper\">\r\n                        <div className=\"center\">\r\n                        {/* http://jsfiddle.net/Kf6dD/ */}\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"champion-list-wrapper\">\r\n                        {/*\r\n                            this part is done by code.\r\n                            Depending on result got from sort nav\r\n                            for default display champions in synergy\r\n                        */}\r\n                        {this.imageSort()}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/*\r\n                <div class=\"titleBox sticky\">\r\n                    <div id=\"title\">\r\n                        <h1 class=\"title\"> Team Fight Tatics </h1>\r\n                        <h2 class=\"title sub\"> Synergy Generator</h2>\r\n                    </div>\r\n                    <div class = \"menuBox\">\r\n                        <div class = \"center\">\r\n                            <table class = \"centerContent\">\r\n                                <tr>\r\n                                    <td class = \"divider\"> | </td>\r\n                                    <td  class = \"cell\"><a href=\"#\"> Champions</a></td>\r\n                                    <td class = \"divider\"> | </td>\r\n                                    <td class = \"cell\"><a href=\"#\"> Items</a></td>\r\n                                    <td class = \"divider\"> | </td>\r\n                                </tr>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class = \"resultContainer center\">\r\n                    <table class = \"resultTable \">\r\n                        <tr>\r\n                            <th>Synergy</th>\r\n                            <th></th>\r\n                        </tr>\r\n                            <td>{this.testing()}</td>\r\n                            <td>{this.printSynergy()}</td>\r\n\r\n                    </table>\r\n\r\n                    {console.log(this.state.selectedChamp,this.state.generatedChamp)}\r\n                </div>\r\n\r\n                <div class = \"sortNavBox\">\r\n                    <div class = \"center\">\r\n                        <table class = \"centerContent\">\r\n                            <tr class=\"centerContent\">\r\n                                <td class=\"sortCell centerContent\"><button class=\"sortBtnone\">By Synergy</button></td>\r\n                                <td class=\"sortCell centerContent\"><button class=\"sortBtntwo\">By Cost</button></td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n\r\n                </div>\r\n                <div id = \"a\">\r\n                    {this.imageSort()}\r\n                </div>\r\n\r\n\r\n*/}\r\n\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Synergy;\r\n","import React from 'react';\nimport './App.css';\n\nimport Synergy from './synergy_champ'\n\nfunction App() {\n  return (\n\n    <div >      \n        <div>\n          <Synergy />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}