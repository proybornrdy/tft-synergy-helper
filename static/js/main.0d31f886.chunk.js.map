{"version":3,"sources":["logo.svg","synergy_champ.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Synergy","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataLink","selectedChamp","champClick","bind","assertThisInitialized","possibleSynergy","champList","selected","i","a","colorCodeCost","push","list","map","champ","react_default","createElement","length","onClick","result","classSynergy","keys","classData","champs","findSynergyChamp","temp","j","div","table","syn","e","test","includes","target","id","className","replace","splice","indexOf","setState","cost","champData","frameClass","class","src","alt","validSpot","neededSynergies","getPlayerHandInfo","qualitySynergies","random","selectedSynergy","Math","floor","findSynergyNotInHand","randomChamp","quantitySynergies","console","log","synergy","charAt","toUpperCase","slice","champInfo","hand","index","championList","quantitySynergyProgress","1","2","3","completed","qualitySynergyProgress","4","5","synergyCount","origins","classes","originIndex","champOrigin","toLowerCase","classIndex","champClass","synergyLevelMap","getSynergyInfo","currSynergyCount","diff","maxDiff","synergyList","synergyData","bonusRankIndex","synergyLevels","originData","testing","imageSort","React","Component","App","src_synergy_champ","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d31f886.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './synergy_champ.css';\r\n\r\nimport champData from './jsonData/champions.json';\r\nimport classData from './jsonData/classes.json';\r\nimport originData from './jsonData/origins.json';\r\n\r\n\r\n\r\nclass Synergy extends React.Component {\r\n\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            dataLink : 'https://ddragon.leagueoflegends.com/cdn/9.12.1/img/champion/',\r\n            selectedChamp : []\r\n        }\r\n        this.champClick = this.champClick.bind(this);\r\n        this.possibleSynergy =this.possibleSynergy.bind(this);\r\n    }\r\n\r\n    testing(){\r\n        var champList = this.state.selectedChamp;\r\n        var selected = [];\r\n        for (var i in champList){\r\n            var a = this.colorCodeCost(champList[i])\r\n            selected.push(a);\r\n        }\r\n\r\n\r\n        var list = selected.map(function(champ){\r\n            return  <th>{champ}</th>\r\n        })\r\n        return (\r\n            <table>\r\n                <thead>\r\n                    <tr>{list}</tr>\r\n                    {list.length >0 &&\r\n                        <tr> <button onClick = {this.possibleSynergy}> generate </button> </tr>\r\n                    }\r\n\r\n                </thead>\r\n            </table>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n    imageSort(){\r\n\r\n        var result =[];\r\n        var classSynergy = Object.keys(classData);\r\n        for (var i in classSynergy){\r\n            var champs = this.findSynergyChamp(classSynergy[i]);\r\n            var temp =[];\r\n            for (var j in champs){\r\n\r\n                temp.push (this.colorCodeCost(champs[j]));\r\n            }\r\n            var list = temp.map(function(champ){\r\n                return <th>{champ}</th>;\r\n            })\r\n            var div = <tr>{list}</tr>;\r\n            result.push(div);\r\n        }\r\n\r\n        var table = result.map(function(syn){\r\n            return <thead>{syn}</thead>;\r\n        })\r\n\r\n        return <table>{table}</table>\r\n\r\n\r\n    }\r\n\r\n    champClick(e){\r\n\r\n        var test = this.state.selectedChamp;\r\n\r\n        if(test.length<10){\r\n            if (!test.includes(e.target.id)){\r\n                e.target.className += \" clicked\"\r\n                test.push(e.target.id)\r\n                this.setState(state => ({\r\n                    selectedChamp: test\r\n                }));\r\n            }else{\r\n                e.target.className = e.target.className.replace(' clicked', '');\r\n                test.splice(test.indexOf(e.target.id),1);\r\n                this.setState(state => ({\r\n                    selectedChamp: test\r\n                }));\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    colorCodeCost(champ){\r\n        //give champion colored frame based on their cost\r\n\r\n\r\n\r\n        var cost = champData[champ][\"cost\"];\r\n        var frameClass = 'champ-Frame';\r\n        if (cost === 1){\r\n            frameClass += ' cost1'\r\n        }\r\n        else if (cost===2) {\r\n            frameClass += ' cost2'\r\n        }\r\n        else if (cost===3) {\r\n            frameClass += ' cost3'\r\n        }\r\n        else if (cost===4) {\r\n            frameClass += ' cost4'\r\n        }\r\n        else if (cost===5) {\r\n            frameClass += ' cost5'\r\n        }\r\n        return (\r\n            <img class={frameClass}\r\n            id = {champ}\r\n            src = {this.state.dataLink + champ + '.png'}\r\n            alt = {champ}\r\n            onClick = {this.champClick} />\r\n        )\r\n    }\r\n\r\n    possibleSynergy(e){\r\n\r\n        var champList = this.state.selectedChamp;\r\n        var maxChampCount = 7;\r\n\r\n        var validSpot = maxChampCount - champList.length;\r\n\r\n        while(validSpot > 0){ //change to while(validSpot > 0)\r\n\r\n            var neededSynergies = this.getPlayerHandInfo(champList);\r\n            //neededSynergies = [quality, quantity]\r\n            //quality mainly focuses on reaching max bonuses on required synergy\r\n            //quantity focuses on reaching many partial bonuses\r\n\r\n            var qualitySynergies ={};\r\n            for (var i = 1; i <=validSpot ; i++){\r\n                if( (typeof neededSynergies[0][i] !== 'undefined') && neededSynergies[0][i].length > 0 ){\r\n                    qualitySynergies[i] = neededSynergies[0][i];\r\n                }\r\n            }\r\n\r\n            var random = Object.keys(qualitySynergies);\r\n            //console.log(qualitySynergies , validSpot)\r\n            if(random.length > 0){\r\n                random = random[Math.floor(Math.random()*random.length)]; //random == needed champ to reach max bonus\r\n                var selectedSynergy = qualitySynergies[random];\r\n                selectedSynergy = selectedSynergy[Math.floor(Math.random()*selectedSynergy.length)];\r\n\r\n                var selectedChamp = this.findSynergyChamp(selectedSynergy);\r\n                selectedChamp = this.findSynergyNotInHand(champList, selectedChamp);\r\n\r\n                for(i = 0; i<=random-1; i++){\r\n                    var randomChamp = selectedChamp[Math.floor(Math.random()*selectedChamp.length)];\r\n                    selectedChamp.splice( selectedChamp.indexOf(randomChamp), 1 );\r\n                    champList.push(randomChamp)\r\n                }\r\n                validSpot -= random;\r\n            }else{\r\n\r\n                var quantitySynergies = {};\r\n                for(i = 1; i<=validSpot;i++){\r\n                    if((typeof neededSynergies[1][i] !== 'undefined') && neededSynergies[1][i].length > 0){\r\n                        quantitySynergies[i] = neededSynergies[1][i];\r\n                    }\r\n                }\r\n\r\n                random = Object.keys(quantitySynergies);\r\n                if(random.length > 0){\r\n                    random = random[Math.floor(Math.random()*random.length)];\r\n                    selectedSynergy = quantitySynergies[random];\r\n                }else{\r\n                    random = 1;\r\n                    selectedSynergy = [\"exile\", \"robot\"]\r\n                }\r\n                selectedSynergy = selectedSynergy[Math.floor(Math.random()*selectedSynergy.length)];\r\n\r\n                selectedChamp = this.findSynergyChamp(selectedSynergy);\r\n                selectedChamp = this.findSynergyNotInHand(champList, selectedChamp);\r\n\r\n                for(i = 0; i<=random-1; i++){\r\n                    var randomChamp = selectedChamp[Math.floor(Math.random()*selectedChamp.length)];\r\n                    selectedChamp.splice( selectedChamp.indexOf(randomChamp), 1 );\r\n                    champList.push(randomChamp)\r\n                }\r\n                validSpot -= random;\r\n            }\r\n        }\r\n\r\n        console.log(champList)\r\n        this.setState(state => ({\r\n            selectedChamp: champList\r\n        }));\r\n        return champList;\r\n    }\r\n\r\n    findSynergyChamp(synergy){\r\n        //find all champions with given synergy\r\n\r\n        synergy = synergy.charAt(0).toUpperCase() + synergy.slice(1)\r\n        var result = [];\r\n        var champList = Object.keys(champData);\r\n\r\n        for(var champ in champList){\r\n            var champInfo = champData[champList[champ]];\r\n            if(champInfo['class'].includes(synergy)){\r\n                result.push(champInfo['key']);\r\n            }else if(champInfo['origin'].includes(synergy)){\r\n                result.push(champInfo['key']);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    findSynergyNotInHand(hand, champList){\r\n        // from given champ list return champions thats not in player's hand\r\n\r\n        var result = [];\r\n        for (var index in champList){\r\n\r\n            if(!hand.includes(champList[index])){\r\n                result.push(champList[index])\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getPlayerHandInfo(championList){\r\n        //get details on champions player has\r\n\r\n\r\n        var quantitySynergyProgress = {\r\n            1:[],\r\n            2:[],\r\n            3:[],\r\n            \"completed\":[]\r\n        }\r\n        var qualitySynergyProgress = {\r\n            1:[],\r\n            2:[],\r\n            3:[],\r\n            4:[],\r\n            5:[],\r\n            \"completed\":[]\r\n        }\r\n\r\n        var synergyCount = {}\r\n        for (var index in championList){\r\n            var champInfo = champData[championList[index]];\r\n            var origins = champInfo[\"origin\"];\r\n            var classes = champInfo[\"class\"];\r\n            for(var originIndex in origins){\r\n                var champOrigin = origins[originIndex].toLowerCase();\r\n                synergyCount[champOrigin] = (synergyCount[champOrigin]||0)+1;\r\n            }\r\n            for(var classIndex in classes){\r\n                var champClass = classes[classIndex].toLowerCase();\r\n                synergyCount[champClass] = (synergyCount[champClass]||0)+1;\r\n            }\r\n        }\r\n\r\n        var synergyLevelMap = this.getSynergyInfo(Object.keys(synergyCount));\r\n        for( var synergy in synergyLevelMap){\r\n            var currSynergyCount = synergyCount[synergy]\r\n            for(var i = 0; i<= synergyLevelMap[synergy].length-1;i++){\r\n                if(currSynergyCount < synergyLevelMap[synergy][i]){\r\n                    var diff = synergyLevelMap[synergy][i] -currSynergyCount;\r\n                    var maxDiff =\r\n                        synergyLevelMap[synergy][synergyLevelMap[synergy].length-1]\r\n                        - currSynergyCount;\r\n\r\n                    if(diff === 1){\r\n                        quantitySynergyProgress[1].push(synergy)\r\n                    }else if (diff === 2) {\r\n                        quantitySynergyProgress[2].push(synergy)\r\n                    }else if (diff === 3) {\r\n                        quantitySynergyProgress[3].push(synergy)\r\n                    }else if (diff === 0) {\r\n                        quantitySynergyProgress['completed'].push(synergy)\r\n                    }\r\n\r\n                    if(maxDiff === 1){\r\n                        qualitySynergyProgress[1].push(synergy)\r\n                    }else if (maxDiff === 2) {\r\n                        qualitySynergyProgress[2].push(synergy)\r\n                    }else if (maxDiff === 3) {\r\n                        qualitySynergyProgress[3].push(synergy)\r\n                    }else if (maxDiff === 4) {\r\n                        qualitySynergyProgress[3].push(synergy)\r\n                    }else if (maxDiff === 5) {\r\n                        qualitySynergyProgress[5].push(synergy)\r\n                    }else if (maxDiff === 0) {\r\n                        qualitySynergyProgress['completed'].push(synergy)\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return [qualitySynergyProgress, quantitySynergyProgress];\r\n\r\n    }\r\n\r\n    getSynergyInfo(synergyList){\r\n\r\n        var synergyData = {};\r\n        for (var index in synergyList){\r\n            var synergy = synergyList[index];\r\n            if(!classData[synergy]){\r\n                //synergy not in classdata. Check originData\r\n                var synergyLevels = [];\r\n                for( var bonusRankIndex in originData[synergy][\"bonuses\"]){\r\n                    synergyLevels.push(originData[synergy][\"bonuses\"][bonusRankIndex][\"needed\"]);\r\n                }\r\n                synergyData[synergy] = synergyLevels;\r\n            }else{\r\n                //synergy in classData\r\n                synergyLevels = [];\r\n                for( bonusRankIndex in classData[synergy][\"bonuses\"]){\r\n                    synergyLevels.push(classData[synergy][\"bonuses\"][bonusRankIndex][\"needed\"]);\r\n                }\r\n                synergyData[synergy] = synergyLevels;\r\n            }\r\n        }\r\n        return synergyData;\r\n\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div>\r\n                    {this.testing()}\r\n                </div>\r\n\r\n                <div id = \"a\">\r\n                    {this.imageSort()}\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Synergy;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Synergy from './synergy_champ'\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n\n      <div>\n          <h3> TFT Possible synergies </h3>\n          <div className = \"synergy\">\n              <Synergy />\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}